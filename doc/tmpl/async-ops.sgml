<!-- ##### SECTION Title ##### -->
Asynchronous File I/O

<!-- ##### SECTION Short_Description ##### -->

allows for non-blocking file operations

<!-- ##### SECTION Long_Description ##### -->
<para>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### FUNCTION gnome_vfs_async_cancel ##### -->
<para>
Cancels an operation
</para>

@handle: the handle to cancel


<!-- ##### FUNCTION gnome_vfs_async_open ##### -->
<para>
Opens a text-based URI according to @open_mode
</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@text_uri: string representation of the URI
@open_mode: open mode
@callback: a callback for when the URI is opened or an error occured
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_open_uri ##### -->
<para>
Opens a GnomeVFSURI according to @open_mode.  This function exposes a public @GnomeVFSURI object, which may be deprecated eventually.  Therefore, use of @gnome_vfs_async_open is encouraged instead of this function to minimize breakage.
</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: @GnomeVFSURI to open
@open_mode: open mode
@callback: a callback for when the URI is opened or an error occured
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_open_as_channel ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@text_uri: 
@open_mode: 
@advised_block_size: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_open_uri_as_channel ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: 
@open_mode: 
@advised_block_size: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_create ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@text_uri: 
@open_mode: 
@exclusive: 
@perm: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_create_uri ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: 
@open_mode: 
@exclusive: 
@perm: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_create_symbolic_link ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: 
@uri_reference: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_create_as_channel ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@text_uri: 
@open_mode: 
@exclusive: 
@perm: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_create_uri_as_channel ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: 
@open_mode: 
@exclusive: 
@perm: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_close ##### -->
<para>

</para>

@handle: GnomeVFSHandle to close
@callback: a callback for when the @handle is closed or an error has occured
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_read ##### -->
<para>

</para>

@handle: 
@buffer: 
@bytes: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_write ##### -->
<para>

</para>

@handle: 
@buffer: 
@bytes: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_get_file_info ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri_list: 
@options: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_set_file_info ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: 
@info: 
@mask: 
@options: 
@callback: 
@callback_data: data to be passed to the callback function


<!-- ##### FUNCTION gnome_vfs_async_load_directory ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@text_uri: 
@options: 
@items_per_notification: 
@callback: 
@callback_data: data to be passed to the callback function
<!-- # Unused Parameters # -->
@filter_type: 
@filter_options: 
@filter_pattern: 


<!-- ##### FUNCTION gnome_vfs_async_load_directory_uri ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@uri: 
@options: 
@items_per_notification: 
@callback: 
@callback_data: data to be passed to the callback function
<!-- # Unused Parameters # -->
@filter_type: 
@filter_options: 
@filter_pattern: 


<!-- ##### FUNCTION gnome_vfs_async_xfer ##### -->
<para>
Transfers file(s) from one location to another
</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@source_uri_list: a @GList.  Each element should be a pointer to a GnomeVFSURI object
@target_uri_list: a @GList.  Each element should be a pointer to a GnomeVFSURI object
@xfer_options: 
@error_mode: 
@overwrite_mode: 
@progress_update_callback: 
@update_callback_data: data to be passed to the progress update callback function
@progress_sync_callback: 
@sync_callback_data: data to be passed to the progress sync callback function
@Returns: 


<!-- ##### FUNCTION gnome_vfs_async_find_directory ##### -->
<para>

</para>

@handle_return: a reference to where the newly created handle pointer should be stored
@near_uri_list: 
@kind: 
@create_if_needed: 
@find_if_needed: 
@permissions: 
@callback: 
@user_data: data to be passed to the callback function


