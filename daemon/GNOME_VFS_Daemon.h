/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef GNOME_VFS_Daemon_H
#define GNOME_VFS_Daemon_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 19
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo-activation/Bonobo_Unknown.h>
#if !defined(ORBIT_DECL_GNOME_VFS_Client) && !defined(_GNOME_VFS_Client_defined)
#define ORBIT_DECL_GNOME_VFS_Client 1
#define _GNOME_VFS_Client_defined 1
#define GNOME_VFS_Client__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_Client;
   extern CORBA_unsigned_long GNOME_VFS_Client__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Client_0)
#define TC_IMPL_TC_GNOME_VFS_Client_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Client_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Client_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Client_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Client_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Client_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Client_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Client_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Client_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Client_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Client_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Client_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Client_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Client_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Client_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Client_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Client_struct;
#define TC_GNOME_VFS_Client ((CORBA_TypeCode)&TC_GNOME_VFS_Client_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Daemon) && !defined(_GNOME_VFS_Daemon_defined)
#define ORBIT_DECL_GNOME_VFS_Daemon 1
#define _GNOME_VFS_Daemon_defined 1
#define GNOME_VFS_Daemon__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_Daemon;
   extern CORBA_unsigned_long GNOME_VFS_Daemon__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Daemon_0)
#define TC_IMPL_TC_GNOME_VFS_Daemon_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Daemon_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Daemon_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Daemon_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Daemon_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Daemon_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Daemon_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Daemon_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Daemon_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Daemon_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Daemon_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Daemon_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Daemon_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Daemon_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Daemon_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Daemon_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Daemon_struct;
#define TC_GNOME_VFS_Daemon ((CORBA_TypeCode)&TC_GNOME_VFS_Daemon_struct)
#endif
#endif

/** POA structures **/
#ifndef _defined_POA_GNOME_VFS_Client
#define _defined_POA_GNOME_VFS_Client 1
   typedef struct
   {
      void *_private;
      void (*doSomething) (PortableServer_Servant _servant,
			   const CORBA_char * aStr, CORBA_Environment * ev);
   }
   POA_GNOME_VFS_Client__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_Client__epv *GNOME_VFS_Client_epv;
   }
   POA_GNOME_VFS_Client__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Client__vepv *vepv;
   }
   POA_GNOME_VFS_Client;
   extern void POA_GNOME_VFS_Client__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Client__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_Client */
#ifndef _defined_POA_GNOME_VFS_Daemon
#define _defined_POA_GNOME_VFS_Daemon 1
   typedef struct
   {
      void *_private;
      void (*setPassword) (PortableServer_Servant _servant,
			   const CORBA_char * uri, const CORBA_char * user,
			   const CORBA_char * passwd, CORBA_Environment * ev);
       CORBA_string(*getPassword) (PortableServer_Servant _servant,
				   const CORBA_char * uri,
				   const CORBA_char * user,
				   CORBA_Environment * ev);
      void (*registerClient) (PortableServer_Servant _servant,
			      const GNOME_VFS_Client client,
			      CORBA_Environment * ev);
      void (*deRegisterClient) (PortableServer_Servant _servant,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
   }
   POA_GNOME_VFS_Daemon__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_Daemon__epv *GNOME_VFS_Daemon_epv;
   }
   POA_GNOME_VFS_Daemon__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Daemon__vepv *vepv;
   }
   POA_GNOME_VFS_Daemon;
   extern void POA_GNOME_VFS_Daemon__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Daemon__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_Daemon */

/** skel prototypes **/
   void _ORBIT_skel_small_GNOME_VFS_Client_doSomething(POA_GNOME_VFS_Client *
						       _ORBIT_servant,
						       gpointer _ORBIT_retval,
						       gpointer * _ORBIT_args,
						       CORBA_Context ctx,
						       CORBA_Environment * ev,
						       void
						       (*_impl_doSomething)
						       (PortableServer_Servant
							_servant,
							const CORBA_char *
							aStr,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_setPassword(POA_GNOME_VFS_Daemon *
						       _ORBIT_servant,
						       gpointer _ORBIT_retval,
						       gpointer * _ORBIT_args,
						       CORBA_Context ctx,
						       CORBA_Environment * ev,
						       void
						       (*_impl_setPassword)
						       (PortableServer_Servant
							_servant,
							const CORBA_char *
							uri,
							const CORBA_char *
							user,
							const CORBA_char *
							passwd,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_getPassword(POA_GNOME_VFS_Daemon *
						       _ORBIT_servant,
						       gpointer _ORBIT_retval,
						       gpointer * _ORBIT_args,
						       CORBA_Context ctx,
						       CORBA_Environment * ev,
						       CORBA_string
						       (*_impl_getPassword)
						       (PortableServer_Servant
							_servant,
							const CORBA_char *
							uri,
							const CORBA_char *
							user,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_registerClient(POA_GNOME_VFS_Daemon
							  * _ORBIT_servant,
							  gpointer
							  _ORBIT_retval,
							  gpointer *
							  _ORBIT_args,
							  CORBA_Context ctx,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl_registerClient)
							  (PortableServer_Servant
							   _servant,
							   const
							   GNOME_VFS_Client
							   client,
							   CORBA_Environment *
							   ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Daemon_deRegisterClient(POA_GNOME_VFS_Daemon
							  * _ORBIT_servant,
							  gpointer
							  _ORBIT_retval,
							  gpointer *
							  _ORBIT_args,
							  CORBA_Context ctx,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl_deRegisterClient)
							  (PortableServer_Servant
							   _servant,
							   const
							   GNOME_VFS_Client
							   client,
							   CORBA_Environment *
							   ev));

/** stub prototypes **/
#define GNOME_VFS_Client_ref Bonobo_Unknown_ref
#define GNOME_VFS_Client_unref Bonobo_Unknown_unref
#define GNOME_VFS_Client_queryInterface Bonobo_Unknown_queryInterface
   void GNOME_VFS_Client_doSomething(GNOME_VFS_Client _obj,
				     const CORBA_char * aStr,
				     CORBA_Environment * ev);
#define GNOME_VFS_Daemon_ref Bonobo_Unknown_ref
#define GNOME_VFS_Daemon_unref Bonobo_Unknown_unref
#define GNOME_VFS_Daemon_queryInterface Bonobo_Unknown_queryInterface
   void GNOME_VFS_Daemon_setPassword(GNOME_VFS_Daemon _obj,
				     const CORBA_char * uri,
				     const CORBA_char * user,
				     const CORBA_char * passwd,
				     CORBA_Environment * ev);
   CORBA_string GNOME_VFS_Daemon_getPassword(GNOME_VFS_Daemon _obj,
					     const CORBA_char * uri,
					     const CORBA_char * user,
					     CORBA_Environment * ev);
   void GNOME_VFS_Daemon_registerClient(GNOME_VFS_Daemon _obj,
					const GNOME_VFS_Client client,
					CORBA_Environment * ev);
   void GNOME_VFS_Daemon_deRegisterClient(GNOME_VFS_Daemon _obj,
					  const GNOME_VFS_Client client,
					  CORBA_Environment * ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_Client__iinterface;
#define GNOME_VFS_Client_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_VFS_Client__imethods[GNOME_VFS_Client_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_Daemon__iinterface;
#define GNOME_VFS_Daemon_IMETHODS_LEN 4
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_VFS_Daemon__imethods[GNOME_VFS_Daemon_IMETHODS_LEN];
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif				/* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
