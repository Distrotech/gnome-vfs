1999-09-30  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs/gnome-vfs-uri.c (my_streq): New function.
	(compare_elements): Use it instead of `strcmp' so that it works
	even with NULL fields.
	(gnome_vfs_uri_equal): Likewise.

1999-09-29  Rodrigo Stulzer Lopes <rodrigo@conectiva.com.br>

	* configure.in: add pt_BR to ALL_LINGUAS

1999-09-29  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/ftp-method.c (MUTEX_LOCK): New macro to lock a mutex.
	Defined to empty if `G_THREADS_ENABLED' is not defined.
	(MUTEX_UNLOCK): New macro to unlock a mutex.  Defined to empty if
	`G_THREADS_ENABLED' is not defined.
	(ftpfs_connection_new) [G_THREADS_ENABLED]: Initialize
	`access_mutex'.
	(ftpfs_connection_unref): Perform locking.  Free the lock if
	refcounting is zero.

	* modules/ftp-method.h [G_THREADS_ENABLED]: New member
	`access_lock' in `ftpfs_connection_t'.

	* modules/ftp-method.c: Define a static lock for
	`connections_hash'.
	(ftpfs_connection_destroy): Removed.
	(ftpfs_connection_unref): Perform locking on `connections_hash'.
	(lookup_conn): Likewise.
	(ftpfs_connection_new): Likewise.

	* modules/ftp-method.c (ftpfs_open_directory): Use the raw URI
	path, without using `g_dirname()'.

1999-09-28  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/bzip2-method.c: Re-indented in GNOME style.

	* configure.in: Added `--enable-gconf' option to explicitly enable
	the GConf module backend; if not specified, GConf support is not
	compiled even if GConf is available.  For now, the GConf API is
	too much of a moving target to rely on it by default.

	* modules/ftp-method.c (ftpfs_get_file_info): `#if 0'ed completely
	to get it to compile.  Always return `GNOME_VFS_ERROR_NOTSUPPORTED'.

1999-09-27  Miguel de Icaza  <miguel@gnu.org>

	* modules/module-shared.c (gnome_vfs_set_meta_for_list,
	gnome_vfs_set_meta, gnome_vfs_stat_to_file_info,
	gnome_vfs_mime_type_from_mode): moved here some code from the file
	backend that can be reused by the ftp backend.
	
	* modules/ftp-method.c: directory listings work.  Still some work
	is required.

1999-09-27  Cody Russell  <bratsche@dfw.net>

	* modules/bzip2-method.c: At Ettore's request, reformatted the
	code to look more like the rest of the code. Function return
	values are now on the preceeding line of the function name.

1999-09-27  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.c (dispatch_open_callback):
	Unref before calling the callback, not after that.
	(dispatch_create_callback): Likewise.
	(dispatch_open_as_channel_callback): Likewise.

	* modules/bzip2-method.c (do_open): Removed unused variables.

	* libgnomevfs/gnome-vfs-uri.c (gnome_vfs_uri_equal): New function.

	* libgnomevfs/gnome-vfs-ops.c (gnome_vfs_open_from_uri): Renamed
	to `gnome_vfs_open_uri'.
	(gnome_vfs_create_for_uri): Renamed to `gnome_vfs_create_uri'.
	(gnome_vfs_get_file_info_from_uri): Renamed to
	`gnome_vfs_get_file_info_uri'.

	* libgnomevfs-pthread/gnome-vfs-job.c (execute_open_as_channel):
	Close and unref channels.
	(execute_create_as_channel): Likewise.
	(gnome_vfs_job_destroy): Use `g_io_channel_close()' instead of
	`close()'.
	(execute_open_as_channel): Wait for ack from the notification.
	(execute_create_as_channel): Likewise.

	* libgnomevfs/gnome-vfs-init.c (gnome_vfs_init): Ignore SIGPIPE.

1999-09-26  Dave Camp  <campd@oit.edu>

	* modules/gconf-method.c (do_get_file_info_from_handle): New method.
	(vfs_module_init): Don't pass the "application" parameter to
	g_conf_init().

11999-09-25  Cody Russell  <bratsche@dfw.net>

	* modules/bzip2-method.c: Removed MAKE_ABSOLUTE().

1999-09-25  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs/gnome-vfs-constants.h (GNOME_VFS_OFFSET_FORMAT_STR)
	[!HAVE_GINT64]: Change "L" to "l".

	* modules/bzip2-method.c (struct _Bzip2MethodHandle): Removed
	`modification_time' member.
	(bzip2_method_handle_new): Removed `modification_time' parameter.
	(do_open): Do not pass it as an uninitialized value nor zero
	anymore.  Open the file using the parent URI correctly.
	(bzip2_read_open): Removed bogus static prototype.
	(do_open): Write mode `#if 0'ed out as it wouldn't work anyway.

	* modules/Makefile.am: Enable compilation of the bzip2 module.

1999-09-25  Kjartan Maraas  <kmaraas@online.no>

	* configure.in: Added da to ALL_LINGUAS.
	
1999-09-18  Cody Russell  <bratsche@dfw.net>

	* modules/bzip2-method.[ch]: Added. Note that this method is not
	currently finished, and so I've disabled building of it for now.

	* modules/Makefile.am: Added Bzip2, but it's currently commented
	out.

	* configure.in: Fixed a typo. "gconf will not be build"
	s/build/built.

1999-09-18  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.c (gnome_vfs_job_new):
	Initialize the `cancelled' member to `FALSE'.
	(gnome_vfs_job_cancel): Set `cancelled' to `TRUE'.
	(dispatch_job_callback): If the job was cancelled, do not dispatch
	the callback.
	(execute_open): If the job was cancelled, return FALSE so that the
	thread dies.
	(execute_create): Likewise.
	(execute_load_directory_not_sorted): Interrupt if job is
	cancelled.  Also, close the directory handle on exit.
	(execute_load_directory_sorted): Likewise.
	(xfer_callback): If the job is cancelled, return FALSE.

	* libgnomevfs-pthread/gnome-vfs-job.h (struct _GnomeVFSJob): New
	member `cancelled'.

1999-09-18  Michael Meeks  <michael@nuclecu.unam.mx>

	* libgnomevfs/gnome-vfs-uri.c (gnome_vfs_uri_has_parent): remove
	unused 'p'

	* modules/ftp-method.c, gzip-method.c, gconf-method.c:
	pad method structure.

	* modules/http-method.c: Add comment explaining the coding stall.

	* modules/file-method.c (do_unlink): implement.

	* libgnomevfs/gnome-vfs-seekable.c (do_close, init_seek): do unlink of
	tmp file. 

	* libgnomevfs/gnome-vfs-ops.c (gnome_vfs_unlink),
	(gnome_vfs_unlink_for_uri): Added.

	* libgnomevfs/gnome-vfs-ops.h: add unlinks.

	* libgnomevfs/gnome-vfs-private-types.h: Add unlink, update truncate.

1999-09-17  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs/gnome-vfs-constants.h: #include "gnome-vfs-types.h"
	and <glibconfig.h>.  #define `GNOME_VFS_SIZE_FORMAT_STR' and
	`GNOME_VFS_OFFSET_FORMAT_STR' according to the size of
	`GnomeVFSFileSize' and `GnomeVFSFileOffset'
	(i.e. according to whether gint64 exists or not).

	* libgnomevfs/gnome-vfs-types.h: #include <glibconfig.h>.

1999-09-16  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.c
	(execute_load_directory_sorted): If the directory is empty, notify
	one single EOF.

	* libgnomevfs/gnome-vfs-uri.c (gnome_vfs_uri_has_parent): New function.
	(gnome_vfs_uri_get_parent): New function.
	(set_uri_element): Make sure there is a slash at the beginning of
	the string.

	* libgnomevfs/gnome-vfs-uri.c (gnome_vfs_uri_to_string): Do not
	try to copy `toplevel_info' if it is NULL.
	(gnome_vfs_uri_dup): If `uri' is NULL, do not spit out a warning.

	* libgnomevfs-pthread/gnome-vfs-job.c
	(dispatch_load_directory_callback): Do not unref the URI here
	unless we are reporting an error!
	(execute_open): Return FALSE if the operation failed, so that the
	thread is killed.
	(execute_create): Likewise.
	(execute_open_as_channel): Return FALSE on any error, and after closing
	the file.
	(execute_create_as_channel): Likewise.

	* libgnomevfs/gnome-vfs-directory.c (directory_visit_internal): Use new
	`gnome_vfs_uri_append_path()' instead of old
	`gnome_vfs_uri_append_text()'.
	(gnome_vfs_directory_visit_files_at_uri): Likewise.
	(CHECK_IF_SUPPORTED): Removed bogus `vfs' parameter.  All
	occurrences updated.

	* libgnomevfs/gnome-vfs-xfer.c (create_xfer_file_list): Use new
	`gnome_vfs_uri_append_path()' instead of old
	`gnome_vfs_uri_append_text()'.
	(gnome_vfs_xfer_uri): Likewise.

	* libgnomevfs/gnome-vfs-uri.c (gnome_vfs_uri_dup): Handle the
	toplevel URI element correctly.
	(gnome_vfs_uri_append_text): Removed.
	(gnome_vfs_uri_append_path): New function.

1999-09-15  Ettore Perazzoli  <ettore@comm2000.it>

	* test/Makefile.am (EXTRA_DIST): Add all the `.c' files.

	* libgnomevfs-corba/Makefile.am (gnome_vfs_slave_SOURCES): List
	built sources on top.
	(libgnomevfs_corba_la_SOURCES): Likewise.

	* libgnomevfs/Makefile.am (noinst_HEADERS): Add
	`gnome-vfs-module.h'.

1999-09-14  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.c (dispatch_open_callback):
	Unref the URI.
	(dispatch_create_callback): Likewise.
	(dispatch_open_as_channel_callback): Likewise.
	(dispatch_create_as_channel_callback): Likewise.
	(dispatch_load_directory_callback): Likewise.

	* libgnomevfs-pthread/gnome-vfs-async-ops.c
	(gnome_vfs_async_open_uri): New function.
	(gnome_vfs_async_open_uri_as_channel): New function.
	(gnome_vfs_async_create_uri): New function.
	(gnome_vfs_async_load_directory_uri): New function.
	(gnome_vfs_async_open): Updated to work with the GnomeVFSJob
	changes using the GnomeVFSURI-based counterpart.
	(gnome_vfs_async_open_as_channel): Likewise.
	(gnome_vfs_async_create): Likewise.
	(gnome_vfs_async_create_as_channel): Likewise.
	(gnome_vfs_async_load_directory): Likewise.

	* libgnomevfs-pthread/gnome-vfs-job.c (execute_open): Updated to
	work with the GnomeVFSJob changes.
	(execute_open_as_channel): Likewise.
	(execute_create): Likewise.
	(execute_create_as_channel): Likewise.
	(execute_load_directory_not_sorted): Likewise.
	(execute_load_directory_sorted): Likewise.

	* libgnomevfs-pthread/gnome-vfs-job.h: Use a `GnomeVFSURI' instead
	of a string for all the jobs, except for the xfer one.

	* libgnomevfs/gnome-vfs-async-ops.h (gnome_vfs_async_open_uri):
	New function prototype.
	(gnome_vfs_async_open_uri_as_channel): New function prototype.
	(gnome_vfs_async_create_uri): New function prototype.
	(gnome_vfs_async_create_uri_as_channel): New function prototype.
	(gnome_vfs_async_load_directory_uri): New function prototype.

	* libgnomevfs/gnome-vfs-directory-list.c
	(gnome_vfs_directory_list_sort): Re-assign `entries' to sort the
	list, and set the current position to "none".
	(gnome_vfs_directory_list_set_position): Allow setting a NULL
	position.

	* libgnomevfs/gnome-vfs-directory-filter.c
	(gnome_vfs_directory_filter_new): Do not return NULL if type is
	"none", but some option is specified.

	* libgnomevfs/gnome-vfs-types.h: New GnomeVFSDirectoryFilterOption
	`GNOME_VFS_DIRECTORY_FILTER_NOSELFDIR' to skip `.' and
	`GNOME_VFS_DIRECTORY_FILTER_NOPARENTDIR' to skip `..'.
	* libgnomevfs/gnome-vfs-directory-filter.c (common_filter): Honour
	them.

	* test/test-directory.c (sort_list): Measure sorting speed if
	`--measure-speed' is specified.
	(main): Sort the list even if `--measure-speed' is specified.
	Removed bogus filtering (it did not fit with the popt argument
	parsing).

	* test/test-async-directory.c: New option `--sort' (`-s').
	(main): Do not sort the directory unless it is specified.

	* test/test-async-directory.c: Changed alias for `--measure-speed'
	from `-s' to `-m'.
	* test/test-directory.c: Likewise.

	* idl/gnome-vfs-slave.idl
	(GNOME::VFS:Slave::Notify::load_directory): The problem with
	`oneway' notifications was an ORBit bug, and has now been
	fixed: make this method `oneway' again.

	* libgnomevfs/gnome-vfs-directory-list.c
	(gnome_vfs_directory_list_get): New function.
	* libgnomevfs/gnome-vfs-directory-list.h: Prototype here.

1999-09-13  Ettore Perazzoli  <ettore@comm2000.it>

	* idl/gnome-vfs-slave.idl: Made all the Notify methods non-oneway.
	[No matter what Sopwith says, ORBit does seem to discard oneway
	calls.  Too bad, this could give us up to 20% more speed in
	`load_directory'.]

1999-09-12  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-corba/gnome-vfs-async-ops.c
	(gnome_vfs_async_cancel): New function.  Just a stub for now.

	* libgnomevfs-pthread/gnome-vfs-job.c (gnome_vfs_job_cancel): New
	function.  Just a stub for now.

	* libgnomevfs-pthread/gnome-vfs-job.h (gnome_vfs_job_cancel):
	New prototype.

	* libgnomevfs-pthread/gnome-vfs-async-ops.c
	(gnome_vfs_async_cancel): New function.

	* libgnomevfs/gnome-vfs-async-ops.h (gnome_vfs_async_cancel): New
	prototype.

	* libgnomevfs-pthread/gnome-vfs-job.c (execute_close): Notify with
	ack and return `FALSE' so that the thread is killed.
	(execute_load_directory_not_sorted): Always return FALSE.
	(execute_load_directory_sorted): Likewise.
	(gnome_vfs_job_new): Start the slave only when the `GnomeVFSJob'
	structure has all the members filled.

	* libgnomevfs-corba/gnome-vfs-slave.c: Do not #define
	`SLAVE_DEBUG'.
	(DPRINTF): Flush stdout.

	* test/test-directory.c: Added speed measurement options.
	(main): Honour them.

	* libgnomevfs/gnome-vfs-directory-list.h
	(gnome_vfs_directory_list_get_num_entries): New Prototype.

	* libgnomevfs/gnome-vfs-directory-list.c
	(struct _GnomeVFSDirectoryList): New member `num_entries'.
	(remove_entry): Decrement it.
	(gnome_vfs_directory_list_new): Initialize it.
	(gnome_vfs_directory_list_prepend): Increment it.
	(gnome_vfs_directory_list_append): Increment it.
	(gnome_vfs_directory_list_get_num_entries): New function, returning
	`num_entries'.

	* libgnomevfs/gnome-vfs-utils.c: #include <string.h>.

1999-09-11  Ettore Perazzoli  <ettore@comm2000.it>

	* test/test-async-directory.c (print_list): Flush stdout after
	each line.

	* libgnomevfs-pthread/gnome-vfs-job.c
	(execute_load_directory_sorted): Set result to
	`GNOME_VFS_ERROR_EOF' for the last notification.

	* test/test-async-directory.c: Added command-line options to
	control the number of items per notification and measure speed.
	(main): Set them up and honour them.
	(directory_load_callback): Do not print anything if measuring speed.

	* test/test-async-directory.c (main): Initialize the libraries
	correctly according to the version we are compiling (CORBA or
	pthread).
	(print_list): New parameter `num_entries'.  Only print out the
	first `num_entries' elements.
	(directory_load_callback): Pass the number of entries.

	* test/Makefile.am: Compile `test-async-directory' in two
	versions: a CORBA and a pthread one.

	* libgnomevfs-pthread/gnome-vfs-job.c (JOB_DEBUG): Debugging
	macro, normally disabled.
	(job_notify): Set `want_notify_ack' before calling `wakeup'.
	(job_ack_notify): Debugging messages.
	(wakeup): Likewise.
	(job_oneway_notify): Likewise.
	(job_notify): Likewise.
	(job_close): Likewise.

	* test/gnome-file-selection/Makefile.am: Compile the pthread
	version of `gnome-file-selection-test' as well.

	* test/gnome-file-selection/gnome-file-selection.c (struct
	_GnomeFileSelectionPrivate): Removed `GnomeVFSAsyncContext'
	member, replaced by a `GnomeVFSAsyncHandle' member.
	(destroy): Don't free the context as it does not exist anymore.
	(init): Do not initialize the context.  Instead, set the handle to
	NULL.
	(start_populating): Load the directory with the new API.
	(populate_callback): Updated for the new API (get a
	GnomeVFSAsyncHandle, not a GnomeVFSAsyncContext).

	* test/Makefile.am (SUBDIRS): Compile `gnome-file-selection'
	again.

	* modules/ftp-method.c: Do not #include "util-url.h" anymore.

	* modules/util-url.c: Removed.
	* modules/util-url.h: Removed.

	* modules/ftp-method.c (ftpfs_chdir_internal): Ooops.  Use `TRUE'
	instead of `WAIT_REPLY'.
	(ftpfs_get_current_directory): Use `FALSE' instead of `NONE'.

1999-09-10  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/ftp-method.c: Removed `reply_str' global.  Removed
	`NONE', `WAIT_REPLY', `WANT_STRING' #defines.
	(command): New parameters `reply_string' and `reply_string_len':
	copy the response in there instead of using the silly global.
	(login_server): Pass `TRUE' instead of `WAIT_REPLY' to `command()'
	for the `wait_reply' parameter.  Pass NULL, 0 as `reply_string',
	`reply_string_len'.
	(ftpfs_chdir_internal): Likewise.
	(open_data_connection): Likewise.
	(changetype): Likewise.
	(initconn): Likewise.
	(abort_transfer): Pass `FALSE' instead of `NONE' to `command()'
	for the `wait_reply' parameter. Pass NULL, 0 as `reply_string',
	`reply_string_len'.
	(ftpfs_get_current_directory): Likewise.
	(setup_passive): Allocate the reply in a local buffer, update the
	call to `command()'.

	* modules/ftp-method.c: Removed variable `force_expiration', it
	does not seem to be have meaningful use.  #define `logfile' to
	`stdout' so that we get some useful debugging messages.  Removed
	`code' global (this was *evil*).  Removed `got_sigpipe' global.
	(retrieve_dir): Do not reference it anymore.
	(get_reply): Return the code without dividing it by 100.
	(command): Return 421 for a transient error.  Return `COMPLETE *
	100' instead of `COMPLETE'.
	(login_server): Divide return values from `get_reply' and
	`command' by 100 before comparing with the `ftp.h' constants.
	(abort_transfer): Compare `get_reply()' return value with 426
	instead of comparing it with 4 and checking the global `code' with
	426.
	(store_file): Divide return value from `get_reply()' by 100.
	(linear_read): Likewise.
	(ftpfs_get_current_directory): Likewise.
	(retrieve_dir): Likewise.
	(abort_transfer): Divide return value from `command()' by 100.
	(login_server): Likewise.
	(setup_passive): Likewise.
	(ftpfs_get_current_directory): Likewise.
	(ftpfs_chdir_internal): Likewise.
	(open_data_connection): Likewise.
	(changetype): Likewise.
	(initconn): Likewise.
	(is_connection_closed): Removed unused function.
	(sig_pipe): Do not set `got_sigpipe' anymore.
	(net_init): Likewise.
	(command): Likewise.

	* modules/ftp-method.c (ftpfs_connection_new): New parameter
	`result_return' used to return the VFS error code for a failure.
	(ftpfs_uri_new): Likewise.
	(ftpfs_open_socket): Return a GnomeVFSResult, and set the
	connection on `conn' directly.  Return
	`GNOME_VFS_ERROR_INVALIDHOSTNAME' if the host name is not valid.
	If `gethostbyname()' fails, translate `h_errno' using
	`gnome_vfs_result_from_h_errno()'.  If any of the other Unix
	functions fails, return a sensible error code using
	`gnome_vfs_result_from_errno()'.
	(login_server): Return value changed to `GnomeVFSResult'.  Return
	`GNOME_VFS_ERROR_LOGINFAILED' on error.  Use login "anonymous" if
	user name is NULL.
	(ftpfs_open): Use the new result parameter in `ftpfs_uri_new()'.
	(ftpfs_create): Likewise.
	(command): Adapted to the new `ftpfs_connection_connect()'.
	(ftpfs_connection_connect): Return type changed to
	`GnomeVFSResult'.  Return an appropriate result value.
	(hash_conn): Deal with NULL host/user names gracefully.
	(get_file_entry): Return `GNOME_VFS_ERROR_NOTFOUND' if the file is
	not found, instead of `GNOME_VFS_ERROR_GENERIC'.

	* libgnomevfs/gnome-vfs-result.c: #include <netdb.h> and declare
	`h_errno' as extern
	(gnome_vfs_result_from_h_errno): New function.
	* libgnomevfs/gnome-vfs-result.h (gnome_vfs_result_from_h_errno):
	Prototype here.

	* libgnomevfs/gnome-vfs-types.h: New errors
	`GNOME_VFS_ERROR_HOSTNOTFOUND', `GNOME_VFS_ERROR_INVALIDHOSTNAME',
	`GNOME_VFS_ERROR_HOSTHASNOADDRESS', `GNOME_VFS_ERROR_LOGINFAILED'.
	* libgnomevfs/gnome-vfs-result.c: Added the corresponding
	description strings.

	* modules/ftp-method.c (resolve_symlink_without_ls_options): Use
	`gnome_vfs_canonicalize_pathname()' instead of
	`canonicalize_pathname' from `util-url.c'.
	(ftpfs_open): Return `GNOME_VFS_ERROR_INVALIDURI' instead of
	`GNOME_VFS_ERROR_WRONGFORMAT'.
	(ftpfs_create): Likewise.
	(ftpfs_connection_new): Get const string parameters, and
	g_strdup() all of them when filling the connection struct.
	(ftpfs_parse_uri): Renamed to `ftpfs_uri_new'.  Use the new
	members in `GnomeVFSToplevelURI' instead of parsing the string.
	(ftpfs_connection_new): Removed unused parameter `path'; callers
	updated.
	(lookup_conn): If the specified port is zero, use the default FTP
	port.
	(ftpfs_connection_new): Likewise.

	* test/test-sync.c (main): Do things through a GnomeVFSURI and use
	`gnome_vfs_uri_to_string()', so that we can debug the new stuff.

	* libgnomevfs/gnome-vfs-xfer.c (gnome_vfs_xfer_uri): Hide password
	when setting source/target URIs in the progress info.

	* libgnomevfs/gnome-vfs-uri.c (set_uri_element): New helper
	function.  It sets the URI element canonicalizing it as well.
	(gnome_vfs_uri_new): Changed to use `set_uri_element' and allocate
	the special toplevel URI element.
	(gnome_vfs_uri_to_string): New parameter `hide_options'.  Add
	host/user information to the string, hiding the information
	specified in `hide_options'.

	* libgnomevfs/gnome-vfs-types.h: New enum `GnomeVFSURIHideOptions'.

	* libgnomevfs/gnome-vfs-utils.c (gnome_vfs_canonicalize_pathname):
	New function, stolen from `util-url.c'.  Slightly changed so that
	it does not remove trailing slashes anymore (we do want them!).

	* libgnomevfs/gnome-vfs-uri.c: Use the constants defined in
	`gnome-vfs-constants.h'.

	* libgnomevfs/gnome-vfs.h: #include `gnome-vfs-constants.h'.

	* libgnomevfs/gnome-vfs-constants.h: New file defining VFS
	constants.

1999-09-09  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs/gnome-vfs-uri.c (gnome_vfs_uri_new): Allocate the
	toplevel URI as a `GnomeVFSToplevelURI'.
	(gnome_vfs_uri_get_toplevel): New function.
	(gnome_vfs_uri_get_host_name): New function.
	(gnome_vfs_uri_get_host_port): New function.
	(gnome_vfs_uri_get_user_name): New function.
	(gnome_vfs_uri_get_password): New function.
	(gnome_vfs_uri_set_host_name): New function.
	(gnome_vfs_uri_set_host_port): New function.
	(gnome_vfs_uri_set_user_name): New function.
	(gnome_vfs_uri_set_password): New function.
	(destroy_element): If it's a toplevel URI, free its extra strings
	as well.
	(string_head): New helper function.
	(split_toplevel_uri): New function, derived from the Midnight
	Commander code in `util-url.c'.  Changed semantics and parameters,
	optimized and prettified a little bit.

	* libgnomevfs/gnome-vfs-types.h: New type `GnomeVFSToplevelURI'.

1999-09-08  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.c (execute_open): Do not set
	`handle' on the notification.
	(execute_create): Likewise.
	(execute_close): Likewise.

	* libgnomevfs-pthread/gnome-vfs-async-ops.c
	(gnome_vfs_async_close): Do not set `handle' on the request.
	(gnome_vfs_async_read): Likewise.
	(gnome_vfs_async_write): Likewise.

	* libgnomevfs-pthread/gnome-vfs-job.c (gnome_vfs_job_new):
	Initialize the `handle' member to NULL.
	(execute_open): Set `handle'.
	(execute_create): Likewise.
	(execute_close): Use `job->handle' instead of the (now gone)
	request-specific member.
	(execute_read): Likewise.
	(execute_write): Likewise.
	(execute_close): Set `handle' to NULL.

	* libgnomevfs-pthread/gnome-vfs-job.h: Removed `handle' members
	from all the `*Job' structs.
	(struct _GnomeVFSJob): New member `handle'.

	* libgnomevfs-pthread/gnome-vfs-job.c (execute_xfer): Return FALSE.
	(execute_load_directory): Return FALSE;

	* libgnomevfs-pthread/gnome-vfs-async-ops.c
	(gnome_vfs_async_context_new): Removed.
	(gnome_vfs_async_context_destroy): Removed.
	(struct _GnomeVFSAsyncContext): Removed.
	(struct _GnomeVFSAsyncHandle): Removed.
	(gnome_vfs_async_open): Updated for the new API.  Create a new job
	for this file and return it as the handle.
	(gnome_vfs_async_open_as_channel): Likewise.
	(gnome_vfs_async_create): Likewise.
	(gnome_vfs_async_create_as_channel): Likewise.
	(gnome_vfs_async_close): Updated for the new API.  
	(gnome_vfs_async_read): Updated for the new API.
	(gnome_vfs_async_write): Updated for the new API.
	(gnome_vfs_async_load_directory): Updated for the new API.  Create
	a new job for this file and return it as the handle.
	(gnome_vfs_async_xfer): Likewise.

	* libgnomevfs-pthread/gnome-vfs-job.c (gnome_vfs_job_new): Removed
	parameter `context'.
	(dispatch_open_callback): Updated to match the new number of
	parameters of callback functions.  Pass the job as the
	`GnomeVFSAsyncHandle' parameter.
	(dispatch_create_callback): Likewise.
	(dispatch_open_as_channel_callback): Likewise.
	(dispatch_create_as_channel_callback): Likewise.
	(dispatch_read_callback): Likewise.
	(dispatch_write_callback): Likewise.
	(dispatch_xfer_callback): Likewise.
	(dispatch_close_callback): Likewise.  Destroy the job on return.
	(dispatch_load_directory_callback): Likewise.

	* libgnomevfs-pthread/gnome-vfs-job.h (struct _GnomeVFSJob):
	Removed member `context'.

	* libgnomevfs-pthread/gnome-vfs-job.c (gnome_vfs_job_new): Create
	new slave first.  If this fails, return NULL.

	* test/test-channel.c (io_channel_callback): Handle combined
	conditions.

	* libgnomevfs/gnome-vfs-types.h: Removed `GnomeVFSAsyncContext'
	definition.

	* libgnomevfs-corba/gnome-vfs-slave-notify.c (impl_Notify_open):
	Duplicate the file handle object.
	(impl_Notify_close): Relese the file handle object.

	* test/test-async.c: Adapted to the new API.
	* test/test-async-channel.c: Likewise.
	* test/test-channel.c: Likewise.

	* test/Makefile.am: Do not compile the pthread versions of the
	tests anymore.  Do not compile the gnome-file-selection test for
	now.

	* libgnomevfs-corba/gnome-vfs-async-ops.c: Updated all the
	functions to handle the new parameters and use the new modules.
	(gnome_vfs_async_context_destroy): Removed.
	(gnome_vfs_async_context_reset): Removed.
	(gnome_vfs_async_context_new): Removed.
	(create_notify_object): Removed.
	(context_from_servant): Removed.

	* libgnomevfs-corba/gnome-vfs-slave-notify.c: New file,
	implementing the `GNOME::VFS::Slave::Notify' interface.
	* libgnomevfs-corba/gnome-vfs-slave-notify.h: Header for it.

	* libgnomevfs-corba/gnome-vfs-slave-process.c: New file,
	replacing GnomeVFSAsyncContext handling.
	* libgnomevfs-corba/gnome-vfs-slave-process.h: Header for it.

	* libgnomevfs/gnome-vfs-types.h: Removed
	`GnomeVFSAsyncContextResetCallback' typedef.

	* libgnomevfs/gnome-vfs-types.h: The callbacks no longer take a
	`GnomeVFSAsyncContext *' parameter.  Instead, they now take a
	`GnomeVFSAsyncHandle *' parameter.

	* libgnomevfs/gnome-vfs-async-ops.h: Removed prototypes for
	(gnome_vfs_async_context_new): Removed prototype.
	(gnome_vfs_async_context_reset): Removed prototype.
	(gnome_vfs_async_context_destroy): Remove prototype.
	(gnome_vfs_async_open): Removed parameter `context'; new parameter
	`handle_return'.
	(gnome_vfs_async_open_as_channel): Likewise.
	(gnome_vfs_async_create): Likewise.
	(gnome_vfs_async_create_as_channel): Likewise.
	(gnome_vfs_async_load_directory): Likewise.
	(gnome_vfs_async_xfer): Likewise.

1999-09-08  Michael Meeks  <michael@nuclecu.unam.mx>

	* libgnomevfs/gnome-vfs-seekable.c (init_seek): Split out file read
	(read_file): to here & added (write_file): to put back the cache.
	(do_close): write file back. (init_seek): Add dirty bit.
	NB. dirt bit could cause problems with 0 length created files.

1999-09-07  Michael Meeks  <michael@imaginator.com>

	* libgnomevfs/gnome-vfs-ops.c (gnome_vfs_open_from_uri): Added new
	improved re-open for non-random capable file methods.

	* doc/writing-modules.txt: Updated.

	* libgnomevfs/gnome-vfs-seekable.c: Actualy does something now.

	* modules/file-method.c (do_create): Fixed unix_mode on created file
	to allow reading from a created file.

1999-09-06  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.c (gnome_vfs_job_new):
	Initialize `wakeup_channel_lock'.
	(gnome_vfs_job_destroy): Free it.
	(wakeup): New helper function.
	(job_oneway_notify): Use it.  Lock the channel mutex before doing
	the notification.
	(job_notify): Likewise.
	(job_ack_notify): Unlock the channel mutex.

	* libgnomevfs-pthread/gnome-vfs-job.h: New member
	`wakeup_channel_lock' in `GnomeVFSJob'.

	* libgnomevfs-pthread/gnome-vfs-job.c (job_notify): Set
	`want_notify_ack' to TRUE before waiting for the acknowledgment
	condition.
	(job_ack_notify): Signal the acknowledgment condition only if
	`want_notify_ack' is TRUE.

	* libgnomevfs-pthread/gnome-vfs-job.h: New member
	`want_notify_ack' in `GnomeVFSJob'.

1999-09-06  Michael Meeks  <michael@imaginator.com>

	* libgnomevfs/gnome-vfs-private.h: Add include gnome-vfs-seekable.h

	* libgnomevfs/gnome-vfs-seekable.[ch]: Created.

	* libgnomevfs/Makefile.am: Include them.

	* libgnomevfs/gnome-vfs-handle.c (gnome_vfs_handle_new): Added
	OPEN_RANDOM hook here.

	* libgnomevfs/gnome-vfs-ops.c (gnome_vfs_open_from_uri): and removed
	hook from here.

	* test/test-seek.c: Implemented fully.

	* modules/file-method.c (do_tell, do_seek): correct order to offset
	then whence.

	* test/gnome-file-selection/gicon.c (gicon_get_icon_for_file): Add
	precondition.

1999-09-06  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-corba/gnome-vfs-async-ops.c
	(impl_Notify_open_as_channel): If the operation fails, the context
	is not busy anymore.

	* libgnomevfs/gnome-vfs-method.c: New type `MethodElement'.
	(gnome_vfs_method_get): Put `MethodElement's in the hash table
	instead of `GnomeVFSMethod's.
	(module_get_sane_handle): Do not check for get_file_info.

	* modules/file-method.c (do_open): Removed wrong directory test.
	(do_create): Removed stupid stat check.
	(do_seek): Call LSEEK() correctly.
	(do_tell): Likewise.

1999-09-05  Michael Meeks  <michael@imaginator.com>

	* test/Makefile.am (noinst_PROGRAMS): Added test_seek.

	* libgnomevfs/gnome-vfs-method.c (module_get_sane_handle):
	Add check for 'seek' and no 'tell'.

1999-09-05  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/file-method.c (do_open): Fstat the file; if it's a
	directory, return `GNOME_VFS_ERROR_ISDIRECTORY'.
	(do_create): Likewise.

1999-09-04  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/file-method.c (stat_to_file_info): New helper function.
	(get_stat_info_from_handle): New function to get GnomeVFSFileInfo
	from an existing handle.
	(do_get_file_info_from_handle): New function, implementing the
	`get_file_info_from_handle' method.

	* modules/ftp-method.c: Likewise.
	* modules/gconf-method.c: Likewise.
	* modules/http-method.c: Likewise.

	* modules/gzip-method.c: Set the `get_file_info_from_handle'
	method to NULL.

	* libgnomevfs/gnome-vfs-private-types.h: New member
	`get_file_info_from_handle' in `GnomeVFSMethod'.

	* libgnomevfs/gnome-vfs-handle.c
	(gnome_vfs_handle_do_get_file_info): New function.

	* libgnomevfs/gnome-vfs-ops.c
	(gnome_vfs_get_file_info_from_handle): New function.

	* libgnomevfs/gnome-vfs-private-types.h: New typedef.
	`GnomeVFSMethodGetFileInfoFromHandleFunc'.

	* modules/file-method.c (do_create): Renamed `file_method' to
	`file_handle'.

1999-09-02  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs/gnome-vfs-process.c: Improved SIGCHLD handling.
	(sigchld_handler): Instead of waking the GLIB loop up once for
	every dead child, wake it up only for registered children.
	(foreach_pid_func): Helper function for `sigchld_handler'.  It
	sends a pointer to the process struct and the exit status to the
	wake up GIOChannel.
	(wake_up): Handle the information as sent by `foreach_pid_func'.

1999-09-01  Dave Camp  <campd@oit.edu>

	* modules/gconf-method.c: Explicitly set the `remove_directory'
	method to NULL.

1999-09-01  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/http-method.c: Explicitly set the `remove_directory'
	method to NULL.

	* modules/ftp-method.c (ftpfs_remove_directory): New function, for
	future implementation of the `remove_directory' method.

	* modules/gzip-method.c: Explicitly set the `remove_directory' and
	`rename' methods to NULL.

	* modules/file-method.c (do_remove_directory): New function,
	implementing the `remove_directory' method.

	* libgnomevfs/gnome-vfs-ops.c
	(gnome_vfs_remove_directory_from_uri): New function.
	(gnome_vfs_remove_directory): New function.

	* libgnomevfs/gnome-vfs-private-types.h: New typedef
	`GnomeVFSMethodRemoveDirectoryFunc'.  Added member
	`remove_directory' to `GnomeVFSMethod'.

	* libgnomevfs/gnome-vfs-ops.c (gnome_vfs_tell): Removed parameter
	`whence'.

	* libgnomevfs/gnome-vfs-handle.c (gnome_vfs_handle_do_tell):
	Removed parameter `whence'.

	* libgnomevfs/gnome-vfs-private-types.h: Removed parameter
	`whence' from the `GnomeVFSMethodTellFunc' function typedef.
	* modules/file-method.c: Updated accordingly.
	* modules/ftp-method.c: Updated accordingly.
	* modules/http-method.c: Updated accordingly.

1999-09-01  Dave Camp  <campd@oit.edu>

	* modules/gconf-method.c (set_mime_type_value): Return a 
	GnomeVFSResult, check return value of calls.
	(set_mime_type_dir): Ditto.
	(set_stat_info_dir): Ditto.
	(file_info_value): Ditto.
	(file_info_dir): Ditto.
	(read_directory): Ditto.

1999-09-01  Dave Camp  <campd@oit.edu>

	* configure.in: Check for GConf.

	* modules/Makefile.am: Build libgconf.la if HAVE_GCONF is set.

	* modules/gconf-method.c: New file.

1999-09-01  Ettore Perazzoli  <ettore@comm2000.it>

	* test/test-async-directory.c (directory_load_callback): Added
	cast for printf.

	* modules/file-method.c:  Removed `init()' prototype.
	* modules/gzip-method.c: Likewise.

	* libgnomevfs-pthread/gnome-vfs-job.c (serve_channel_read): Use
	`GnomeVFSFileSize' appropriately.
	(serve_channel_write): Likewise.

	* test/test-async-directory.c (print_list): Fix format string to
	handle long longs.
	* test/test-async.c (read_callback): Likewise.
	* test/test-copy.c (xfer_progress_callback): Likewise.
	* test/test-directory.c (print_list): Likewise.
	* test/test-directory-visit.c (directory_visit_callback): Likewise.

	* modules/file-method.c: #define `_LARGEFILE64_SOURCE' before
	including anything.  #define `OPEN' to `open64' if available, to
	`open' otherwise.  #define `LSEEK' to `lseek64' if available, to
	`lseek' otherwise.  Likewise, #define `OFF_T' to either `off_t' or
	`off64_t', accordingly.
	(do_open): Use the `OPEN' macro instead of `open()'.
	(do_create): Likewise.
	(do_seek): Use the `LSEEK' macro instead of `lseek()'.
	(do_tell): Likewise.
	(do_tell): Use the `OFF_T' instead of `off_t'.

	* libgnomevfs/gnome-vfs-types.h: Define `GnomeVFSFileSize' as
	`guint64' and `GnomeVFSFileOffset' to `gint64' if we have gint64
	support

	* configure.in: Check for `open64' and `lseek64'.

	* libgnomevfs/gnome-vfs-types.h: Added comment with instructions
	for modifying the GnomeVFSResult properly.

	* libgnomevfs/gnome-vfs-result.c: Added status strings for
	`GNOME_VFS_ERROR_INTERRUPTED' and `GNOME_VFS_ERROR_FILEEXISTS'.

1999-08-31  Michael Meeks  <michael@imaginator.com>

	* modules/file-method.c: Rename module init and add shutdown & include.
	* modules/ftp-method.c: ditto.
	* modules/gzip-method.c: ditto.
	* modules/http-method.c: ditto.

	* libgnomevfs/gnome-vfs-module.h: Create.

	* libgnomevfs/gnome-vfs-method.c (module_get_sane_handle): Add &
	use new function name macros.
	(gnome_vfs_method_get): move some stuff & call get_sane_handle.

1999-08-31  Miguel de Icaza  <miguel@gnu.org>

	* modules/ftp-method.c: new global: got_sigpipe.
	(ftpfs_connection_connect): Init sigpipe handler;  Only connect if
	connection is invalid.
	(get_file_entry): Apply IS_LINEAR on proper flags.
	(ftpfs_open): Use the linear state as computed in get_file_entry.
	(ftpfs_read): Implemented.
	(ftpfs_close): Implemented.
	(ftpfs_create): Implemented.
	(ftpfs_seek): Implemented.
	(ftpfs_tell): Implemented.

1999-08-30  Miguel de Icaza  <miguel@gnu.org>

	* modules/ftp-method.c (ftpfs_dir_unref): New method.

1999-08-29  Miguel de Icaza  <miguel@gnu.org>

	* libgnomevfs/gnome-vfs-types.h: New error types.
	
	* libgnomevfs/gnome-vfs-result.c: Return nice results for it.

1999-08-30  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* modules/ftp-method.c (IS_LINEAR): Define macro.
	GNOME_VFS_OPEN_RANDOM means we need seek support, otherwise we are
	a linear transfer.  Cool.

1999-08-28  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-corba/gnome-vfs-async-ops.c
	(impl_Notify_load_directory): Copy `name' and allocate it
	dynamically.

	* libgnomevfs-corba/gnome-vfs-slave.c (allocate_info_list):
	Initialize `name' to NULL.
	(copy_file_info): Copy `name' into the CORBA `FileInfo' struct
	using `set_corba_string'.

	* idl/gnome-vfs-slave.idl: Added member `name' to `FileInfo'.

	* modules/file-method.c (read_directory): Allocate the name in the
	`GnomeVFSFileInfo' struct dynamically.
	(do_get_file_info): Set `name' in the info using `g_basename'.

	* libgnomevfs/gnome-vfs-file-info.c (gnome_vfs_file_info_clear):
	Free `name'.
	(gnome_vfs_file_info_copy): Realloc `name' in the destination
	`GnomeVFSFileInfo'.

	* libgnomevfs/gnome-vfs-types.h: Removed #definition of
	`GNOME_VFS_FILE_NAME_LEN'.  Member `name' of `GnomeVFSFileInfo'
	changed from `char []' to `char *'.

1999-08-27  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* modules/util-url.c, modules/ftp-method.c: New files for the
	implementation of the FTP backend.

1999-08-26  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* test/gnome-file-selection/gnome-file-selection.c
	(setup_directory_clist): Also push the colormap and pop the
	colormap. 

1999-08-27  Ettore Perazzoli  <ettore@comm2000.it>

	* test/gnome-file-selection/gicon.c: Do not #define `ICONDIR'
	manually anymore.

	* test/gnome-file-selection/Makefile.am (INCLUDES): Added quick &
	dirty `-DICONDIR' definition.

1999-08-26  Ettore Perazzoli  <ettore@comm2000.it>

	* libgnomevfs-pthread/gnome-vfs-job.h: Changed `is_empty' member
	of `GnomeVFSJob' from 1-bit wide gboolean to plain gboolean.

	* modules/Makefile.am (modules_LTLIBRARIES): Removed previously
	commented HTTP module.

	* test/Makefile.am: Minor cleanup.
	(noinst_PROGRAMS): Replace `test-async-pthread' with
	`test-async_pthread' and `test-async-corba' with
	`test-async_corba'.  Added `test-channel_corba' and
	`test-channel_pthread'.
	(test-channel_corba): New target, compiling `test-channel.c' with
	the CORBA-based VFS.
	(test-channel_pthread): New target, compiling `test-channel.c'
	with the PThread-based VFS.

	* libgnomevfs-pthread/gnome-vfs-job.c (serve_channel_write): New
	function.
	(serve_channel_read): New function.
	(execute_open_as_channel): New function.
	(execute_create_as_channel): New function.
	(gnome_vfs_job_execute): Call `execute_open_as_channel()' and
	`execute_create_as_channel()' for jobs
	`GNOME_VFS_JOB_OPEN_AS_CHANNEL' and
	`GNOME_VFS_JOB_CREATE_AS_CHANNEL', respectively.
	(dispatch_open_or_create_as_channel_callback): New function.
	(dispatch_job_callback): Handle `GNOME_VFS_JOB_OPEN_AS_CHANNEL'
	and `GNOME_VFS_JOB_CREATE_AS_CHANNEL' through it.

	* libgnomevfs-pthread/gnome-vfs-async-ops.c
	(gnome_vfs_async_open_as_channel): New function.
	(gnome_vfs_async_create_as_channel): New function.

	* libgnomevfs-pthread/gnome-vfs-job.h: New structs
	`GnomeVFSOpenAsChannelJob', `GnomeVFSCreateAsChannelJob'; added
	corresponding members to `GnomeVFSJob'.  New values
	`GNOME_VFS_JOB_OPEN_AS_CHANNEL' and
	`GNOME_VFS_JOB_CREATE_AS_CHANNEL' in `GnomeVFSJobType'.

	* test/test-async-directory.c: Removed translation marks.
	* test/test-async.c: Likewise.
	* test/test-directory-visit.c: Likewise.
	* test/test-directory.c: Likewise.

	* libgnomevfs/gnome-vfs-result.c (gnome_vfs_result_from_errno):
	Translate `EPERM' with `GNOME_VFS_ERROR_NOTPERMITTED'.

	* libgnomevfs/gnome-vfs-types.h: Added value
	`GNOME_VFS_ERROR_NOTPERMITTED' to GnomeVFSError.

	* test/test-channel.c: New test program.

	* libgnomevfs-corba/gnome-vfs-slave.h (setup_and_serve_channel):
	New function.
	(serve_channel_read): New function.
	(serve_channel_write): New function.
	(impl_Request_open_as_channel): New function.
	(impl_Request_create_as_channel): New function.
	(init_Request): Install `impl_Request_open_as_channel' and
	`impl_Request_create_as_channel' as the implementations for
	`Request::open_as_channel' and `Request::create_as_channel',
	respectively.

	* libgnomevfs-corba/gnome-vfs-async-ops.c: New values
	`GNOME_VFS_ASYNC_OP_OPEN_AS_CHANNEL',
	`GNOME_VFS_ASYNC_OP_CREATE_AS_CHANNEL'
	`GNOME_VFS_ASYNC_OP_CHANNEL' in enum `GnomeVFSAsyncOperation'.
	Sorted values in alphabetical order.
	(gnome_vfs_async_open_as_channel): New function.
	(gnome_vfs_async_create_as_channel): New function.
	(impl_Notify_open_as_channel): New function.
	(create_notify_object): Install it as the implementation of
	`Notify::open_as_channel'.

	* idl/gnome-vfs-slave.idl (Request::open_as_channel): New method.
	(Request::create_as_channel): New method.
	(Notify::open_as_channel): New method.

	* libgnomevfs/gnome-vfs-async-ops.h
	(gnome_vfs_async_open_as_channel): Declare new function.
	(gnome_vfs_async_create_as_channel): Declare new function.

	* libgnomevfs/gnome-vfs-types.h: New typedefs
	`GnomeVFSAsyncOpenAsChannelCallback',
	`GnomeVFSAsyncCreateAsChannelCallback'.

	* libgnomevfs-corba/gnome-vfs-async-ops.c
	(gnome_vfs_async_create): Added precondition that file must be
	open for writing.
	(impl_Notify_reset): Oops.  Removed typo (`*' before parameter
	`servant').

1999-08-26  Michael Meeks  <michael@imaginator.com>

	* test/gnome-file-selection/gnome-file-selection.c
	(clean_file_list): Added. (change_dir): Clean list.
	(populate_callback): Add only files.

1999-08-26  Michael Meeks  <michael@imaginator.com>

	* test/gnome-file-selection/gnome-file-selection.c (destroy): 
	Destroy file_list.
	(GnomeFileSelectionPrivate): Changed file_list to GList.
	(select_icon_callback): use this list, add lots of preconditions.

1999-08-26  Michael Meeks  <michael@imaginator.com>

	* libgnomevfs/gnome-vfs-types.h: Add GnomeVFSFileSize, and
	GnomeVFSFileOffset ( unsigned, signed ). and push through the
	whole API - How will CORBA deal with this ?

1999-08-25  Michael Meeks  <michael@imaginator.com>

	* doc/writing-modules.txt: Started.

1999-08-25  Michael Meeks  <michael@imaginator.com>

	* http-method.[ch]: First pass at implementing.
	
	* modules/file-method.c: Add NULL RenameFunc to methods, and
	remove const from do_make_directory's GnomeVFSURI.

	* modules/Makefile.am: Add libhttp.la, commented out.

1999-08-25  Ettore Perazzoli  <ettore@comm2000.it>

	* modules/file-method.c: Preconditions return `GNOME_VFS_INTERNAL'
	instead of `GNOME_VFS_BAD_POINTER'.

	* libgnomevfs/gnome-vfs-types.h: Removed value
	`GNOME_VFS_BAD_POINTER' from the `GnomeVFSResult' enum.

1999-08-25  Michael Meeks  <michael@imaginator.com>

	* modules/file-method.c: Update all preconditions to return BAD_POINTER
	as their GnomeVFSResult instead of FALSE.

	* libgnomevfs/gnome-vfs-types.h: Added GNOME_VFS_ERROR_BAD_POINTER.

	* modules/gzip-method.h: Rename conditional include
	from _FILE_H to _GZIP_H

1999-08-25  Ettore Perazzoli  <ettore@comm2000.it>

	* configure.in: Add gnomeui libs to `VFSCORBA_LIBS'.
