AC_INIT(libgnomevfs/gnome-vfs.h)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gnome-vfs, 1.1)
GNOME_COMMON_INIT

AM_MAINTAINER_MODE

AM_PROG_XML_I18N_TOOLS

AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_AWK
AM_PROG_LIBTOOL


dnl ==========================================================================
dnl
dnl If you add a version number here, you *must* either use it with
dnl EAZEL_VERSION_INSIST or add an AC_SUBST line for it, or it will
dnl never make it into the spec file!
dnl
dnl ==========================================================================

GNOME_REQUIRE_PKGCONFIG
echo "Trying to autodetect GNOME Platform; give configure the --enable-platform-gnome-2 or --disable-platform-gnome-2 argument to override."
$PKG_CONFIG --exists oaf-2.0 > /dev/null 2>&1
if test $? == 0 ; then
  autodetected_gnome_2=yes
  echo "Autodetected GNOME 2.0 Platform."
else
  autodetected_gnome_2=no
  echo "Autodetected GNOME 1.x Platform."
fi

GNOME_PLATFORM_GNOME_2($autodetected_gnome_2)

if test $platform_gnome_2 = yes ; then
  GLIB_REQUIRED=1.3.1
  GCONF_REQUIRED=1.1
  OAF_REQUIRED=0.7.0
  XML_REQUIRED=2.2.8
  ORBIT_REQUIRED=2.3.90
else
  GLIB_REQUIRED=1.2.6
  GCONF_REQUIRED=0.9
  OAF_REQUIRED=0.3.0
  XML_REQUIRED=1.8.8
fi

AC_SUBST(GLIB_REQUIRED)
AC_SUBST(GCONF_REQUIRED)
AC_SUBST(OAF_REQUIRED)
AC_SUBST(XML_REQUIRED)
AC_SUBST(ORBIT_REQUIRED)

dnl ===========================================================================

dnl EAZEL_VERSION_CANON(version)
dnl                     1

AC_DEFUN(EAZEL_VERSION_CANON, [`

	dnl Assumes that there are no more than 999 revisions at a level,
	dnl no more than three levels of revision.
	dnl
	dnl Any more than that, and test starts messing up the numeric
	dnl comparisons because its integers overflow, and there's no
	dnl way to do string comparisons in the shell.  Grr.
	dnl
	dnl Must come up with some way to fix this.

	echo "$1" |
	tr . '\012' |
	sed -e 's/^/000/' -e 's/^.*\(...\)/\1/' |
	tr -d '\012' |
	sed 's/$/000000000/
	     s/^\(.........\).*/\1/'
`])

dnl EAZEL_VERSION_INSIST(package, get-version-cmd, operator, want-version-var)
dnl                      1        2                3         4

AC_DEFUN(EAZEL_VERSION_INSIST, [
	ez_want_version=[$]$4

	case "$3" in
		">")	ez_operator=-gt ;;
		">=")	ez_operator=-ge ;;
		"<")	ez_operator=-lt ;;
		"<=")	ez_operator=-le ;;
		"=")	ez_operator=-eq ;;
		"!=")	ez_operator=-ne ;;
		*)	AC_ERROR(Unknown operator $3 in configure script) ;;
	esac

	AC_MSG_CHECKING(for $1 $3 [$ez_want_version])

	if ez_installed_version="`$2`"
	then
		AC_MSG_RESULT([$ez_installed_version])
	else
		AC_ERROR($2 failed)
	fi

	if test "EAZEL_VERSION_CANON([$ez_installed_version])" "$ez_operator" \
		"EAZEL_VERSION_CANON([$ez_want_version])"
	then
		:
		AC_SUBST($4)
	else
		AC_ERROR($1 version [$ez_want_version] is required.)
	fi
])

dnl ===========================================================================

dnl ====================================
dnl =
dnl = Profiling support
dnl =
dnl ====================================
ENABLE_PROFILER=
AC_ARG_ENABLE(profiler,
[  --enable-profiler		Enable profiler],
ENABLE_PROFILER=1
AC_DEFINE(ENABLE_PROFILER))

if test "x$ENABLE_PROFILER" = "x1"
then
	CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES"
	LDFLAGS="/gnome/PROFILE/lib/libprofiler.so -lpthread"
fi

AC_SUBST(ENABLE_PROFILER)
AM_CONDITIONAL(ENABLE_PROFILER, test "x$ENABLE_PROFILER" = "x1")
dnl ====================================
dnl = Profiling support
dnl ====================================

if test $platform_gnome_2 = yes ; then
  GNOME_PKGCONFIG_CHECK_MODULES(GLIB, glib-2.0:$GLIB_REQUIRED gmodule-2.0:$GLIB_REQUIRED gthread-2.0:$GLIB_REQUIRED gtk+-2.0:$GLIB_REQUIRED)
  dnl GNOME_PKGCONFIG_CHECK_MODULES(ORBIT, ORBit-2.0:$ORBIT_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(OAF, oaf-2.0:$OAF_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(XML, libxml-2.0:$XML_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(GCONF, gconf-2.0:$GCONF_REQUIRED)

  VFS_GNOME_CFLAGS="$GLIB_CFLAGS"
  VFS_GNOMEUI_CFLAGS="$GLIB_CFLAGS"
  VFS_CAPPLET_CFLAGS=
  VFS_GNOME_LIBS="$GLIB_LIBS"
  VFS_GNOMEUI_LIBS="GLIB_LIBS"
  VFS_CAPPLET_LIBS=
  VFS_GLIB_CONFIG="glib-config-2.0"

  AC_DEFINE(GNOME_PLATFORM_VERSION, 1095000)
else
  GNOME_PKGCONFIG_CHECK_MODULES(GLIB, glib:$GLIB_REQUIRED gmodule:$GLIB_REQUIRED gthread:$GLIB_REQUIRED gtk+:$GLIB_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(ORBIT, ORBit:$ORBIT_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(OAF, oaf:$OAF_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(XML, libxml:$XML_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(GCONF, gconfgtk:$GCONF_REQUIRED)

  VFS_GNOME_CFLAGS="`gnome-config --cflags gnome`"
  VFS_GNOMEUI_CFLAGS="`gnome-config --cflags gnome gnomeui`"
  VFS_GNOMEGNORBA_CFLAGS="`gnome-config --cflags gnome gnomeui gnorba`"
  VFS_CAPPLET_CFLAGS="`gnome-config --cflags gnome gnomeui capplet`"
  VFS_GNOME_LIBS="`gnome-config --libs gnome`"
  VFS_GNOMEUI_LIBS="`gnome-config --libs gnome gnomeui`"
  VFS_GNOMEGNORBA_LIBS="`gnome-config --libs gnome gnomeui gnorba`"
  VFS_CAPPLET_LIBS="`gnome-config --libs gnome gnomeui capplet`"
  VFS_GLIB_CONFIG="glib-config"

  AC_DEFINE(GNOME_PLATFORM_VERSION, 1002000)
fi
AC_SUBST(VFS_GNOME_CFLAGS)
AC_SUBST(VFS_GNOMEUI_CFLAGS)
AC_SUBST(VFS_GNOMEGNORBA_CFLAGS)
AC_SUBST(VFS_CAPPLET_CFLAGS)
AC_SUBST(VFS_GNOME_LIBS)
AC_SUBST(VFS_GNOMEUI_LIBS)
AC_SUBST(VFS_CAPPLET_LIBS)
AC_SUBST(VFS_GNOMEGNORBA_LIBS)

AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GMODULE_LIBS)
AC_SUBST(GMODULE_CFLAGS)
AC_SUBST(GTHREAD_LIBS)
AC_SUBST(GTHREAD_CFLAGS)
AC_SUBST(ORBIT_LIBS)
AC_SUBST(ORBIT_CFLAGS)
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)
AC_SUBST(GCONF_LIBS)
AC_SUBST(GCONF_CFLAGS)

AC_DEFINE(USING_OAF)
AC_SUBST(OAF_LIBS)
AC_SUBST(OAF_CFLAGS)

GNOME_GTKDOC_CHECK

AC_ARG_ENABLE(libefs,
              [  --disable-libefs={yes|no}       Disable libefs access backend],
              libefs_disabled="yes")
AC_ARG_WITH(default-backend,
	      [  --with-default-backend=(corba|pthread)		    ],
	      default_backend="$withval")

cflags_set=yes
GNOME_COMPILE_WARNINGS
VFS_CFLAGS="$warnCFLAGS $complCFLAGS"

GNOME_PTHREAD_CHECK

dnl Don't blindly #define them if they're typedef'ed in <sys/types.h>
AM_GNOME_SIZE_T
AM_GNOME_OFF_T

ALL_LINGUAS="az ca da de el es fi fr ga gl hu it ja ko lt nl nn no pl pt_BR ro ru sk sl sv tr uk wa"
AM_GNOME2_GETTEXT

AC_FUNC_ALLOCA
AC_CHECK_FUNCS(getdtablesize open64 lseek64 statvfs)
AC_REPLACE_FUNCS(getdelim)

dnl
dnl This is so that we find the 64bit type
dnl
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)

VFS_SIZE="unsigned long"
VFS_OFFSET="long"
VFS_SIZE_IS="UNSIGNED_LONG"
VFS_OFFSET_IS="LONG"
VFS_SIZE_PRINTF="lu"
VFS_OFFSET_PRINTF="ld"

dnl
dnl See if any of the types is 64 bits, and in case it is, use it
dnl Note: We test an (int) even though I think using (long) would be fine.
dnl       This is because glib does it this way for gint64 and so there
dnl       is probably a reason behind it
dnl
case 8 in
$ac_cv_sizeof_int)
  VFS_SIZE="unsigned int"
  VFS_OFFSET="int"
  VFS_SIZE_IS="UNSIGNED_INT"
  VFS_OFFSET_IS="INT"
  VFS_SIZE_PRINTF="u"
  VFS_OFFSET_PRINTF="d"
  ;;
$ac_cv_sizeof_long)
  # Nothing happens here, we are already using a long
  ;;
$ac_cv_sizeof_long_long)
  VFS_SIZE="unsigned long long"
  VFS_OFFSET="long long"
  VFS_SIZE_IS="UNSIGNED_LONG_LONG"
  VFS_OFFSET_IS="LONG_LONG"
  VFS_SIZE_PRINTF="Lu"
  VFS_OFFSET_PRINTF="Ld"
  ;;
esac

AC_SUBST(VFS_SIZE)
AC_SUBST(VFS_OFFSET)
AC_SUBST(VFS_SIZE_IS)
AC_SUBST(VFS_OFFSET_IS)
AC_SUBST(VFS_SIZE_PRINTF)
AC_SUBST(VFS_OFFSET_PRINTF)

AC_CHECK_HEADERS(sys/resource.h sys/vfs.h sys/mount.h sys/statvfs.h)

dnl turn warnings into errors to enforce clean code

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])

WERROR=""
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	echo "enable compile warnings = $set_more_warnings"
	VFS_CFLAGS="-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith"
	WERROR="-Werror"

	for option in -Wsign-promo -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$VFS_CFLAGS $option $CFLAGS"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		CFLAGS="$SAVE_CFLAGS"
		if test $has_option = yes; then
		  VFS_CFLAGS="$VFS_CFLAGS $option"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
fi
AC_SUBST(WERROR)
AC_SUBST(VFS_CFLAGS)

dnl
dnl gnome vfs Documentation
dnl 
GNOME_VFS_DIR=`(cd $srcdir; pwd)`
AC_SUBST(GNOME_VFS_DIR)

dnl CORBA backend.
VFSCORBA_LIBDIR='-L${libdir}'
VFSCORBA_INCLUDEDIR='-I${includedir} -I${libdir}/vfs/include'
VFSCORBA_INCLUDEDIR="$VFSCORBA_INCLUDEDIR $VFS_GNOMEUI_CFLAGS `orbit-config --cflags server`"
VFSCORBA_LIBS="-lgnomevfs -lgnomevfs-corba $VFS_GNOMEUI_LIBS `orbit-config --libs server`"
AC_SUBST(VFSCORBA_LIBDIR)
AC_SUBST(VFSCORBA_INCLUDEDIR)
AC_SUBST(VFSCORBA_LIBS)

dnl Pthread backend.
VFSPTHREAD_LIBDIR='-L${libdir}'
VFSPTHREAD_INCLUDEDIR='-I${includedir} -I${libdir}/vfs/include'
VFSPTHREAD_INCLUDEDIR="$VFSPTHREAD_INCLUDEDIR $VFS_GNOME_CFLAGS"
VFSPTHREAD_LIBS="-lgnomevfs -lgnomevfs-pthread $VFS_GNOME_LIBS `$VFS_GLIB_CONFIG --libs gthread`"
AC_SUBST(VFSPTHREAD_LIBDIR)
AC_SUBST(VFSPTHREAD_INCLUDEDIR)
AC_SUBST(VFSPTHREAD_LIBS)

dnl Default backend (CORBA for now).
if test -z "$default_backend"; then
	default_backend="pthread"
fi
AC_DEFINE_UNQUOTED(GNOME_VFS_DEFAULT_BACKEND, "$default_backend")

VFS_LIBS="-lgnomevfs `$VFS_GLIB_CONFIG --libs gthread gmodule`"
VFS_LIBDIR='-L${libdir}'
VFS_INCLUDEDIR='-I${includedir} -I${libdir}/vfs/include'" `$VFS_GLIB_CONFIG --cflags gthread gmodule`"
AC_SUBST(VFS_LIBDIR)
AC_SUBST(VFS_INCLUDEDIR)
AC_SUBST(VFS_LIBS)


dnl
dnl gnome-xml libraries - for WebDAV support in modules/http-method.c
dnl

AC_PATH_PROG(XML_CONFIG,xml-config,no)
if test x$XML_CONFIG = "xno"; then
  AC_MSG_ERROR(Couldn't find xml-config please install the gnome-xml package)
fi
XML_LIBS=`$XML_CONFIG --libs`
XML_CFLAGS=`$XML_CONFIG --cflags`
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)

dnl
dnl efs-method.c
dnl

dnl if test "x$libefs_disabled" = xyes; then 
dnl     LIBEFS_CONFIG=no
dnl else
dnl     AC_PATH_PROG(LIBEFS_CONFIG, libefs-config, no)
dnl fi
dnl 
dnl if test "x$LIBEFS_CONFIG" != xno; then
dnl 	LIBEFS_LIBS=`$LIBEFS_CONFIG --libs`
dnl 	LIBEFS_CFLAGS=`$LIBEFS_CONFIG --cflags`
dnl fi
dnl 

AM_CONDITIONAL(HAVE_LIBEFS, false) 
LIBEFS_LIBS=""
LIBEFS_CFLAGS=""
AC_SUBST(LIBEFS_LIBS)
AC_SUBST(LIBEFS_CFLAGS)

dnl
dnl ftp-method.c
dnl
AC_DEFUN(AC_STRUCT_LINGER, [
av_struct_linger=no
AC_MSG_CHECKING(struct linger is available)
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>

struct linger li;

main ()
{
    li.l_onoff = 1;
    li.l_linger = 120;
    exit (0);
}
],[
AC_DEFINE(HAVE_STRUCT_LINGER)
av_struct_linger=yes
],[
av_struct_linger=no
],[
av_struct_linger=no
])
AC_MSG_RESULT($av_struct_linger)
])

AC_CHECK_LIB(nsl, t_accept)
AC_CHECK_LIB(socket, socket)

have_socket=no
AC_CHECK_FUNCS(socket, have_socket=yes)
if test $have_socket = no; then
  # socket is not in the default libraries.  See if it's in some other.
  for lib in bsd socket inet; do
    AC_CHECK_LIB($lib, socket, [
	  LIBS="$LIBS -l$lib"
	  have_socket=yes
	  AC_DEFINE(HAVE_SOCKET)
	  break])
  done
fi

have_gethostbyname=no
AC_CHECK_FUNC(gethostbyname, have_gethostbyname=yes)
if test $have_gethostbyname = no; then
  # gethostbyname is not in the default libraries.  See if it's in some other.
  for lib in bsd socket inet; do
    AC_CHECK_LIB($lib, gethostbyname, [LIBS="$LIBS -l$lib"; have_gethostbyname=yes; break])
  done
fi

AC_CHECK_LIB(bz2, bzCompressInit, AC_DEFINE(HAVE_OLDER_BZIP2))

if test $have_socket = yes; then
    AC_STRUCT_LINGER
fi

dnl modules/cdda

AM_CONDITIONAL(HAVE_CDDA, false);
AC_CHECK_HEADERS(cdda_interface.h cdda_paranoia.h, [
	CDDA_LIBS="$CDDA_LIBS -lcdda_paranoia, -lcdda_interface";
		AM_CONDITIONAL(HAVE_CDDA, true);
	])


dnl Final touch

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

dnl This is needed by `test/vfs-run.in'
TOP_BUILDDIR="`pwd`"
AC_SUBST(TOP_BUILDDIR)

dnl Output files

AC_OUTPUT([
Makefile
gnome-vfs.spec
libgnomevfs/gnome-vfs-file-size.h
data/Makefile
data/mime/Makefile
idl/Makefile
intl/Makefile
libgnomevfs-corba/Makefile
libgnomevfs-pthread/Makefile
libgnomevfs/Makefile
modules/Makefile
modules/extfs/Makefile
modules/extfs/ar
modules/extfs/cpio
modules/extfs/deb
modules/extfs/lha
modules/extfs/rar
modules/extfs/zip
modules/extfs/zoo
man/Makefile
man/gnome-vfs-mime.5
devel-docs/Makefile
devel-docs/gnome-vfs/Makefile
devel-docs/gnome-vfs-tutorial/Makefile
po/Makefile.in
test/Makefile
test/gnome-file-selection/Makefile
test/vfs-run
gnomevfs-2.0.pc
])

chmod u+x test/vfs-run

dnl <= Configuration summary =>

echo "<= gnome-vfs configuration summary :"
dnl <= Profile support? =>
case "X$ENABLE_PROFILER" in
X1)
echo "
Enable profiler         : YES"
;;
*)
echo "
Enable profiler         : NO"
echo
;;
esac

dnl <= CFLAGS and LDFLAGS =>
echo "
CFLAGS                  : $CFLAGS
LDFLAGS                 : $LDFLAGS"
echo
